# TOSCA types definitions for MiCADO
# 
# MiCADO version: v0.8.0
# TOSCA version: Simple Profile in YAML v1.0 (+ some v1.1)
#
#
#

tosca_definitions_version: tosca_simple_yaml_1_0

# TOSCA Interfaces Types
#
# MiCADO uses TOSCA interfaces to pass orchestrator specific
# parameters to the orchestration tools responsible for managing
# the lifecycle of various compoenents of the application.
# Generally this is facilitated by passing interface inputs
# into the output file that gets generated by a translator
#
# OpenStack TOSCAParser does not enforce any requirement
# or restriction on potential inputs when these types
# are used in application description templates (ADTs)
#
# You can find the following interfaces types below:
#   * tosca.interface.MiCADO.Occopus
#   * tosca.interface.MiCADO.Terraform
#   * tosca.interface.MiCADO.Swarm
#   * tosca.interface.MiCADO.Kubernetes
#
interface_types:

  tosca.interfaces.MiCADO.Occopus:
    description: Interface for VM management with Occopus
    derived_from: tosca.interfaces.node.lifecycle.Standard
    inputs:
      endpoint_cloud:
        type: string
        description: Cloud API endpoint
        required: false
      interface_cloud:
        type: string
        description: Cloud provider
        required: false
        constraints:
          - valid_values: [ 'ec2', 'nova', 'cloudsigma', 'cloudbroker' ]
    create:
      description: Create a compute node with Occopus

  tosca.interfaces.MiCADO.Terraform:
    description: Interface for VM management with Terraform
    derived_from: tosca.interfaces.node.lifecycle.Standard
    inputs:
      provider:
        description: Cloud provider
        type: string
        required: false
    create:
      description: Create a compute node with Terraform

  tosca.interfaces.MiCADO.Swarm:
    description: Interface for container orchestration with Docker Swarm
    derived_from: tosca.interfaces.node.lifecycle.Standard
    inputs:
      deploy:
        description: swarm-specific configuration settings
        type: deploy_type
        required: false
    create:
      description: Orchestrate a container node with Swarm

  # Ideally, PodSpec fields are passed using inputs in configure,
  # top level resource Spec fields are passed using inputs in create
  # (ContainerSpec fields are passed via node properties)
  tosca.interfaces.MiCADO.Kubernetes:
    description: Interface for container orchestration with Kubernetes
    derived_from: tosca.interfaces.node.lifecycle.Standard
    create:
      description: Complete/fill the workload spec for Kubernetes
    configure:
      description: Complete/fill the PodSpec for Kubernetes


# TOSCA Node Types
#
# MiCADO uses TOSCA nodes to build cloud components such as containers,
# virtual machines or volumes. These components are further configured,
# and their lifecycles managed, by passing orchestrator specific 
# options via TOSCA interfaces.
#
# OpenStack TOSCAParser WILL enforce restrictions on properties when
# these types are used in application description templates. If
# a property does not appear in the node definition below (or in a parent)
# it cannot be expressed inside a template.
#
# The following subsections of node types exist below
#   * Compute node types
#   * Container node types
#   * Auxilary node types (volume, config, network)
#
node_types:

  # Compute (Virtual Machine) node types
  #
  # You can find the following node types below:
  #   * tosca.nodes.MiCADO.Compute
  #   * tosca.nodes.MiCADO.CloudSigma.Compute
  #   * tosca.nodes.MiCADO.CloudSigma.Compute.Occo
  #   * tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small
  #   * tosca.nodes.MiCADO.CloudSigma.Compute.Occo.big
  #   * tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small.NFS
  #   * tosca.nodes.MiCADO.EC2.Compute
  #   * tosca.nodes.MiCADO.CloudBroker.Compute
  #   * tosca.nodes.MiCADO.Nova.Compute
  #

  tosca.nodes.MiCADO.Compute:
    description: Base compute node for MiCADO
    derived_from: tosca.nodes.Compute
    properties:
      context:
        type: context_type
        required: false
    capabilities:
      host:
        type: tosca.capabilities.Compute
      os:
        type: tosca.capabilities.OperatingSystem
      scalable:
        type: tosca.capabilities.Scalable

  tosca.nodes.MiCADO.CloudSigma.Compute:
    description: CloudSigma compute node
    derived_from: tosca.nodes.MiCADO.Compute
    properties:
      num_cpus:
        type: integer
        required: true
        constraints:
          - greater_or_equal: 250
          - less_or_equal: 100000
      mem_size:
        type: integer
        required: true
        constraints:
          - greater_or_equal: 268435456
          - less_or_equal: 137438953472
      libdrive_id:
        type: string
        required: true
      vnc_password:
        type: string
        required: true
      public_key_id:
        type: string
        required: true
      host_name:
        type: string
        required: false
      hv_relaxed:
        type: boolean
        required: false
      hv_tsc:
        type: boolean
        required: false
      nics:
        type: list
        required: true
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
      Terraform:
        type: tosca.interfaces.MiCADO.Terraform

  # Some examples of abstraction in Compute node types
  tosca.nodes.MiCADO.CloudSigma.Compute.Occo:
    description: Basic CloudSigma VM for MiCADO, by Occopus
    derived_from: tosca.nodes.MiCADO.CloudSigma.Compute
    properties:
      endpoint:
        type: string
        default: https://zrh.cloudsigma.com/api/2.0
        required: true
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
        create:
          inputs:
            interface_cloud: cloudsigma
            endpoint_cloud: { get_property: [ SELF, endpoint ] }

  tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small:
    description: Basic CloudSigma VM (2GHz/2GB) for MiCADO, by Occopus
    derived_from: tosca.nodes.MiCADO.CloudSigma.Compute.Occo
    properties:
      num_cpus:
        type: integer
        default: 2000
        required: true
      mem_size:
        type: integer
        default: 2147483648
        required: true
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
        create:
          inputs:
            interface_cloud: cloudsigma
            endpoint_cloud: { get_property: [ SELF, endpoint ] }

  tosca.nodes.MiCADO.CloudSigma.Compute.Occo.big:
    description: Bigger CloudSigma VM (4GHz/4GB) for MiCADO, by Occopus
    derived_from: tosca.nodes.MiCADO.CloudSigma.Compute.Occo
    properties:
      num_cpus:
        type: integer
        default: 4000
        required: true
      mem_size:
        type: integer
        default: 4294967296
        required: true
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
        create:
          inputs:
            interface_cloud: cloudsigma
            endpoint_cloud: { get_property: [ SELF, endpoint ] }


  tosca.nodes.MiCADO.CloudSigma.Occo.small.NFS:
    description: CloudSigma VM (2GHz/2GB) with NFS dependencies, by Occopus
    derived_from: tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small
    properties:
      context:
        type: map
        default:
          append: yes
          cloud_config: |
            runcmd:
            - apt-get install -y nfs-kernel-server nfs-common
        required: true
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
        create:
          inputs:
            interface_cloud: cloudsigma
            endpoint_cloud: { get_property: [ SELF, endpoint ] }

  tosca.nodes.MiCADO.EC2.Compute:
    description: Amazon EC2 compute node
    derived_from: tosca.nodes.MiCADO.Compute
    properties:
      region_name:
        type: string
        required: true
      image_id:
        type: string
        required: true
      instance_type:
        type: string
        required: true
      key_name:
        type: string
        required: false
      security_group_ids:
        type: list
        required: false
      subnet_id:
        type: string
        required: false
      tags:
        type: map
        required: false
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
      Terraform:
        type: tosca.interfaces.MiCADO.Terraform

  tosca.nodes.MiCADO.CloudBroker.Compute:
    description: CloudBroker compute node
    derived_from: tosca.nodes.MiCADO.Compute
    properties:
      deployment_id:
        type: string
        required: true
      instance_type_id:
        type: string
        required: true
      key_pair_id:
        type: string
        required: false
      opened_port:
        type: string
        required: false
      infrastructure_component_id:
        type: string
        required: false
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
      Terraform:
        type: tosca.interfaces.MiCADO.Terraform

  tosca.nodes.MiCADO.Nova.Compute:
    description: Openstack Nova Compute node
    derived_from: tosca.nodes.MiCADO.Compute
    properties:
      image_id:
        type: string
        required: true
      flavor_name:
        type: string
        required: true
      tenant_name:
        type: string
        required: false
      project_id:
        type: string
        required: true
      user_domain_name:
        type: string
        required: false
      network_id:
        type: string
        required: true
      server_name:
        type: string
        required: false
      availability_zone:
        type: string
        required: false
      key_name:
        type: string
        required: false
      security_groups:
        type: list
        required: false
      floating_ip:
        type: string
        required: false
      floating_ip_pool:
        type: string
        required: false
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
      Terraform:
        type: tosca.interfaces.MiCADO.Terraform

  # Custom Kubernetes resource type
  #
  # This type can be used to define *any* Kubernetes resource
  tosca.nodes.MiCADO.Kubernetes:
    description: Base type for defining custom Kubernetes resources
    derived_from: tosca.nodes.Root
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes

  # Container node types
  #
  # You can find the following node types below:
  #   * tosca.nodes.MiCADO.Container.Application.Docker
  #   * tosca.nodes.MiCADO.Container.Application.Docker.Deployment
  #   * tosca.nodes.MiCADO.Container.Application.Docker.DaemonSet
  #

  # Node type for Docker application container
  # This node supports both Docker and Kubernetes style field names
  # Where possible, especially for common fields, an adaptor will
  # attempt to translate these fields
  tosca.nodes.MiCADO.Container.Application.Docker:
    description: |
      description of a Docker container in the style of a Kubernetes 
      ContainerSpec or Docker Compose long syntax
    derived_from: tosca.nodes.Container.Application.Docker

    properties:

      # Kubernetes style field names
      # These field names are present in the ContainerSpec of a Pod
      # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#container-v1-core
      args:
        description: arguments to pass to entrypoint
        type: list
        required: false
      command:
        description: command run by container (Kubernetes-style & Docker-list-style)
        type: list
        required: false
      env:
        description: environment variables to pass to the container
        type: list
        required: false
      envFrom:
        description: environment variables from a source
        type: list
        required: false
      image:
        description: container image
        type: string
        required: false
      imagePullPolicy:
        description: Force pull an image
        type: string
        required: false
        constraints:
          - valid_values:
              - 'Always'
              - 'IfNotPresent'
      lifecycle:
        description: Kubernetes hooks for lifecycle management
        type: map
        required: false
      livenessProbe:
        description: Kubernetes-style healthcheck
        type: map
        required: false
      name:
        description: define the container name
        type: string
        required: false
      ports:
        description: ports to be forwarded (long-syntax Compose or flat Kubernetes ServiceSpec)
        type: list
        required: false
        entry_schema:
          type: ports_type
      readinessProbe:
        description: Kubernetes-style ready-check
        type: map
        required: false
      resources:
        description: resource requirements for the container (Kubernetes-style)
        type: map
        required: false
      securityContext:
        description: specify security options (Kubernetes-style)
        type: map
        required: false
      stdin:
        description: allocate a buffer for stdin for this container (Kubernetes-style)
        type: boolean
        required: false
      stdinOnce:
        description: close the stdin channel after one attach
        type: boolean
        required: false
      terminationMessagePath:
        description: Kubernetes container path to write termination message
        type: string
        required: false
      terminationMessagePolicy:
        description: Kubernetes container termination message
        type: string
        required: false
      tty:
        description: allocate a TTY for the container (requires stdin set to true)
        type: boolean
        required: false
      volumeDevices:
        description: block volume devices to be used by the container
        type: list
        required: false
      volumeMounts:
        description: pod volumes to mount inside container filesystems
        type: list
        required: false
      workingDir:
        description: Kubernetes container working directory
        type: string
        required: false

      # Docker Swarm / Compose-style field names
      # If field name is the same across orchestrators, Kubernetes-style takes preference
      # Any Windows-only properties or properties ignored by Swarm are not included
      configs:
        description: point to created configs
        type: list
        required: false
      container_name:
        description: the container name *translates to Kubernetes name*
        type: string
        required: false
      deploy:
        description: supports Swarm-only options of a Compose file
        type: deploy_type
        required: false
      dns:
        description: custom DNS servers *translates to Kubernetes PodSpec dnsConfig*
        type: list
        required: false
      dns_search:
        description: custom DNS searches *translates to Kubernetes PodSpec dnsConfig*
        type: list
        required: false
      entrypoint:
        description: command run by container (string) *translates to Kubernetes command*
        type: string
        required: false
      env_file:
        description: load environment vars from a file
        type: list
        required: false
      environment:
        description: environment variables (map-style) *translates to Kubernetes env*
        type: map
        required: false
      expose:
        description: ports to expose to other linked services
        type: list
        required: false
      extra_hosts:
        description: host aliases to add to /etc/hosts
        type: list
        required: false
      healthcheck:
        description: Docker-style healthcheck
        type: map
        required: false
      init:
        description: run an init to forward signals, reap processes
        type: boolean
        required: false
      labels:
        description: Labels *translates to Kubernetes PodSpec labels*
        type: map
        required: false
      logging:
        description: logging configuration
        type: map
        required: false
      networks:
        description: network configuration
        type: map
        required: false
      pid:
        description: option for using host PID *translates to Kubernetes hostPID*
        type: string
        required: false
      privileged:
        description: run with root equivalency *translates to Kubernetes SecurityContext*
        type: boolean
        required: false
      secrets:
        description: passing secrets
        type: list
        required: false
      stdin_open:
        description: allocate a buffer for stdin *translates to Kubernetes stdin*
        type: boolean
        required: false
      stop_grace_period:
        description: when container is killed after shutdown *translates to Kubernetes grace...*
        type: string
        required: false
      stop_signal:
        description: signal to stop the container
        type: string
        required: false
      ulimits:
        description: override default ulimits of container
        type: map
        required: false
      volumes:
        description: volumes to mount
        type: list
        required: false
      working_dir:
        description: working directory *translates to Kubernetes workingDir*
        type: string
        required: false

    # Fill the artifact with the image property by default    
    artifacts:
      image:
        type: tosca.artifacts.Deployment.Image.Container.Docker
        file: { get_property: [ SELF, image ] }
        repository: docker_hub

    # Possible interfaces for this node
    interfaces:
      Swarm:
        type: tosca.interfaces.MiCADO.Swarm
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes

    # Possible outputs for this node
    attributes:
      port:
        type: integer

    # Requests for relations this node supports
    capabilities:
      service:
        type: tosca.capabilities.Container.Docker
      container:
        type: tosca.capabilities.Container.Docker
      scalable:
        type: tosca.capabilities.Scalable

    # Relationships this node supports
    requirements:
      - service:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.MiCADO.ConnectsTo
      - container:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.HostedOn
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.MiCADO.Compute
          relationship: tosca.relationships.HostedOn
      - volume:
          capability: tosca.capabilities.Attachment
          node: tosca.nodes.MiCADO.Container.Volume
          relationship: tosca.relationships.AttachesTo

  # An abstraction of the above node for cleaner TOSCA templates
  tosca.nodes.MiCADO.Container.Application.Docker.Deployment:
    description: An abstraction of the Docker container node, creates a Kubernetes Deployment
    derived_from: tosca.nodes.MiCADO.Container.Application.Docker

    # Fill the artifact by default with the image property
    artifacts:
      image:
        type: tosca.artifacts.Deployment.Image.Container.Docker
        file: { get_property: [ SELF, image ] }
        repository: docker_hub

    # Use these interface inputs by default
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
        create:
          inputs:
            kind: Deployment
            spec:
              strategy:
                type: Recreate

  tosca.nodes.MiCADO.Container.Application.Docker.DaemonSet:
    description: An abstraction which creates a Kubernetes DaemonSet
    derived_from: tosca.nodes.MiCADO.Container.Application.Docker
    artifacts:
      image:
        type: tosca.artifacts.Deployment.Image.Container.Docker
        file: { get_property: [ SELF, image ] }
        repository: docker_hub
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
        create:
          inputs:
            kind: DaemonSet

  tosca.nodes.MiCADO.Container.Pod.Kubernetes:
    description: A bare Kubernetes Pod, which supports hosting containers
    derived_from: tosca.nodes.Container.Runtime
    properties:
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
    requirements:
      - service:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.MiCADO.ConnectsTo
      - container:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.HostedOn
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.MiCADO.Compute
          relationship: tosca.relationships.HostedOn

  tosca.nodes.MiCADO.Container.Pod.Kubernetes.Deployment:
    description: An abstraction of the above, creates a Deployment
    derived_from: tosca.nodes.MiCADO.Container.Pod.Kubernetes
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
        create:
          inputs:
            kind: Deployment
            spec:
              strategy:
                type: Recreate


  # Auxilary node types
  #
  # You can find the following node types and their abstractions below:
  #   * tosca.nodes.MiCADO.Container.Config
  #   * tosca.nodes.MiCADO.Container.Volume
  #   * tosca.nodes.MiCADO.network.Network.Docker
  #
  tosca.nodes.MiCADO.Container.Config:
    description: The base node type for Container configuration stores
    derived_from: tosca.nodes.Root
    description: base type for Config files
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Swarm:
        type: tosca.interfaces.MiCADO.Swarm
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes

  tosca.nodes.MiCADO.Container.Config.Kubernetes:
    description: An abstraction of the config node for Kubernetes ConfigMaps
    derived_from: tosca.nodes.MiCADO.Container.Config
    description: base type for Config files
    properties:
      data:
        type: map
        description: data
        required: false
      binaryData:
        type: map
        description: datab
        required: false
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
        create:
          inputs:
            data: { get_property: [ SELF, data ] }
            binaryData: { get_property: [ SELF, binaryData ] }

  tosca.nodes.MiCADO.Container.Volume:
    description: The base node for container volumes
    derived_from: tosca.nodes.BlockStorage
    description: description of a container volume
    properties:
      name:
        type: string
        description: name of the volume
        required: false
      labels:
        type: map
        description: map of metadata labels
        required: false
      size:
        type: string
        description: overwrite size requirement
        required: false
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Swarm:
        type: tosca.interfaces.MiCADO.Swarm
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes

  tosca.nodes.MiCADO.Container.Volume.EmptyDir:
    description: An abstraction of the volume node for Kubernetes EmptyDir volumes
    derived_from: tosca.nodes.MiCADO.Container.Volume
    description: description of a Kubernetes HostPath Volume
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
        create:
          inputs:
            spec:
              emptyDir: {}

  tosca.nodes.MiCADO.Container.Volume.HostPath:
    description: An abstraction of the volume node for Kubernetes HostPath volumes
    derived_from: tosca.nodes.MiCADO.Container.Volume
    description: description of a Kubernetes HostPath Volume
    properties:
      path:
        type: string
        description: path on host
        required: true
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
        create:
          inputs:
            spec:
              hostPath:
                path: { get_property: [ SELF, path ] }

  tosca.nodes.MiCADO.Container.Volume.NFS:
    description: An abstraction of the volume node for Kubernetes NFS volumes
    derived_from: tosca.nodes.MiCADO.Container.Volume
    description: description of a Kubernetes NFS Volume
    properties:
      path:
        type: string
        description: path on host
        required: true
      server:
        type: string
        description: NFS server IP
        required: true
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
        create:
          inputs:
            spec:
              nfs:
                path: { get_property: [ SELF, path ] }
                server: { get_property: [ SELF, server ] }

  tosca.nodes.MiCADO.Container.Volume.GlusterFS:
    description: An abstraction of the volume node for Kubernetes GlusterFS volumes
    derived_from: tosca.nodes.MiCADO.Container.Volume
    description: description of a Kubernetes GFS Volume
    properties:
      path:
        type: string
        description: path on host
        required: true
      endpoints:
        type: string
        description: NFS server IP
        required: true
      readOnly:
        type: boolean
        required: false
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
        create:
          inputs:
            spec:
              glusterfs:
                path: { get_property: [ SELF, path ] }
                endpoints: { get_property: [ SELF, endpoints ] }
                readOnly: { get_property: [ SELF, readOnly ] }

  tosca.nodes.MiCADO.network.Network.Docker:
    description: Node for creating a new Docker network
    derived_from: tosca.nodes.network.Network
    description: description of a Docker network
    properties:
      attachable:
        type: boolean
        description: is attachable
        required: false
      driver:
        type: string
        description: network driver
        required: false
      external:
        type: boolean
        required: false
      driver_opts:
        type: map
        description: network driver options (incl. mtu)
        required: false
      ip_version:
        type: integer
        required: false
        default: null
      dhcp_enabled:
        type: boolean
        required: false
        default: null

# TOSCA Relationship Types
#
# MiCADO uses TOSCA relationships to define interoperability between
# different components of the application. Most interoperability
# requirements can be defined with these TOSCA normative types:
#   * tosca.relationships.HostedOn (container-in-pod or container/pod-on-VM)
#   * tosca.relationships.AttachesTo (volume to container)
#
# In Docker Swarm the following custom type was used to connect specific
# containers over a specific Docker network. It is not used in Kubernetes
#   * tosca.relationships.MiCADO.ConnectsTo
#
relationship_types:
  tosca.relationships.MiCADO.ConnectsTo:
    description: used to connect containers over a specific Docker network
    derived_from: tosca.relationships.ConnectsTo
    properties:
      network:
        type: string
        description: Name of Docker network to connect containers over
        required: true

# TOSCA Capability Types
#
# MiCADO uses TOSCA capabilities to define what interoperability &
# relationships a node can support. No custom types are required,
# though we here define a TOSCA capability which only joined the
# normative types in TOSCA Simple Profile v1.1:
#   * tosca.capabilities.Compute
#
capability_types:

  tosca.capabilities.Compute:
    description: Defining TOSCA compute capabilities (normative as of V1.1)
    derived_from: tosca.capabilities.Container
    properties:
      name:
        type: string
        required: false
      num_cpus:
        type: integer
        required: false
        constraints:
          - greater_or_equal: 1
      cpu_frequency:
        type: scalar-unit.frequency
        required: false
        constraints:
          - greater_or_equal: 0.1 GHz
      disk_size:
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 MB
      mem_size:
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 MB

# TOSCA Artifact Types
#
# MiCADO uses TOSCA artifacts to define externally pulled images,
# files, or data sources. The most common of these is the TOSCA
# suggested non-normative type for Docker images
#   * tosca.artifacts.Deployment.Image.Container.Docker
#
# This section will grow when support for CSAR archives is added
#
artifact_types:

  tosca.artifacts.CloudInit.Data:
    description: A possible artifact type for CloudInit files
    derived_from: tosca.artifacts.Root
    properties:
      raw_text:
        type: string
        required: false

  tosca.artifacts.File.Secrets.Docker:
    description: A legacy artifact type for Docker secrets
    derived_from: tosca.artifacts.File
    properties:
      name:
        type: string
        required: false
      file:
        type: string
        required: false
      external:
        type: boolean
        required: false

# TOSCA Data Types
#
# TOSCA data types can be used to restrict the entry schema of
# node properties, or support custom data entry.
#
data_types:

  context_type:
    description: Available properties in the contextualisation map
    properties:
      cloud_config:
        type: string
        required: false
      append:
        type: boolean
        required: false
        default: no

  deploy_type:
    description: Available properties for Swarm specific orchestration
    properties:
      mode:
        type: string
        required: false
      replicas:
        type: integer
        required: false
      resources:
        type: resource_type
        required: false
      labels:
        type: map
        required: false
      placement:
        type: placement_type
        required: false
      restart_policy:
        type: map
        required: false
      update_config:
        type: map
        required: false

  ports_type:
    description: |
      Available properties for the ports setting in a container node.

      Supports Kubernetes flat ServiceSpec (ServiceSpec & ServicePort flattened),
      ContainerPort spec AND long syntax Docker compose port options
    properties:

      # Kubernetes ServicePort fields
      name:
        desription: Name of port
        type: string
        required: false
      nodePort:
        description: Kubernetes nodePort assignment (30000-32767)
        type: integer
        required: false
        constraints:
          - greater_or_equal: 30000
          - less_or_equal: 32767
      port:
        description: Visible port (Kubernetes-style)
        type: integer
        required: false
      protocol:
        description: Protocol (Swarm & Kubernetes) - SCTP is Kube only
        type: string
        required: false
        constraints:
          - valid_values:
              - 'tcp'
              - 'TCP'
              - 'udp'
              - 'UDP'
              - 'SCTP'
      targetPort:
        description: Port inside container (Kubernetes-style)
        type: string
        required: false

      # Kubernetes ContainerPort fields
      containerPort:
        description: Give more info on exposed ports, omitting this does not prevent the port from being exposed (internally)
        type: integer
        required: false
      hostIP:
        description: Host IP to bind external port to
        type: string
        required: false
      hostPort:
        description: port to expose on the host. If HostNetwork then must == ContainerPort
        type: integer
        required: false

      # Docker Compose long syntax port options
      target:
        description: Port inside container (Swarm-style)
        type: integer
        required: false
      published:
        description: Visible port (Swarm-style)
        type: integer
        required: false
      mode:
        description: Port mode *translates to Kubernetes host port*
        type: string
        required: false
        constraints:
          - valid_values:
              - 'host'
              - 'ingress'

      # Kubernetes Service field
      metadata:
        description: Kubernetes space for adding metadata (such as service name)
        type: map
        required: false

      # Kubernetes ServiceSpec fields
      clusterIP:
        description: Kubernetes clusterIP assignment (10.0.0.1/24)
        type: string
        required: false
      externalIPs:
        description: list of IPs which nodes will also accept traffic for
        type: list
        required: false
      externalName:
        description: external reference which DNS component will return as a CNAME
        type: string
        required: false
      externalTrafficPolicy:
        description: route to node-local or cluster-wide endpoints
        type: string
        required: false
      healthCheckNodePort:
        description: healthcheck for LoadBalancer, node-local mode
        type: integer
        required: false
      loadBalancerIP:
        description: specify IP for LoadBalancer, if type is LB
        type: string
        required: false
      loadBalancerSourceRanges:
        description: restrict traffic to specified IPs
        type: list
        required: false
      ports:
        description: ServicePort definition (also supported in this map (one-level up))
        type: list
        required: false
      publishNotReadyAddresses:
        description: force publish NotReadyAddresses
        type: boolean
        required: false
      selector:
        description: overwrite the automatically generated selector of the service
        type: map
        required: false
      sessionAffinity:
        description: maintain session affinity
        type: string
        required: false
      sessionAffinityConfig:
        description: configurations of session affinity
        type: map
        required: false
      type:
        description: The Kubernetes equivalent of mode
        type: string
        required: false
        constraints:
          - valid_values:
              - 'ClusterIP'
              - 'NodePort'
              - 'LoadBalancer'
              - 'ExternalName'

  resource_type:
    description: Available fields for Swarm deploy resources
    properties:
      cpus:
        type: string
        required: false
      memory:
        type: string
        required: false

  placement_type:
    description: Available fields for Swarm deploy placement
    properties:
      constraints:
        required: false
        type: list
      preferences:
        required: false
        type: list

# TOSCA Policy Types
#
# TOSCA policy types are used to specify scaling, alerting, monitoring 
# and other such requirements for nodes. Currently these types exist:
#   * tosca.policies.Scaling.MiCADO
#   * tosca.policies.Alerting.MiCADO
#   * tosca.policies.Monitoring.MiCADO
#
policy_types:

  tosca.policies.Scaling.MiCADO:
    description: base MiCADO scaling policy defining data sources, constants, queries, alerts, limits and rules
    derived_from: tosca.policies.Scaling
    properties:
      sources:
        type: list
        description: list of prometheus exporters as data sources
        required: false
      constants:
        type: map
        description: list of constants referred in other sections
        required: false
      alerts:
        type: list
        description: list of prometheus alerts
        required: false
      queries:
        type: map
        description: list of variables and their associated prometheus query
        required: false
      stage:
        type: string
        description: the stage that will be affected by the policy (not yet implemented)
        default: started
        required: false
      priority:
        type: integer
        description: the priority with which the policy will be exectued (not yet implemented)
        default: 100
        required: false
      min_instances:
        type: integer
        required: true
        description: defines the min instances to scale to
      max_instances:
        type: integer
        required: true
        description: defines the max instances to scale to
      scaling_rule:
        type: string
        description: python code to define scaling rule
        required: true

  tosca.policies.Alerting.MiCADO:
    description: base MiCADO policy for alerting
    derived_from: tosca.policies.Root
    properties:
      constants:
        type: map
        description: list of constants referred in other sections
        required: false
      alerts:
        type: list
        description: list of prometheus alerts
        required: false
      stage:
        type: string
        description: the stage that will be affected by the policy (not yet implemented)
        default: started
        required: false
      priority:
        type: integer
        description: the priority with which the policy will be exectued (not yet implemented)
        default: 100
        required: false

  tosca.policies.Monitoring.MiCADO:
    description: base MiCADO policy for enabling prometheus exporters
    derived_from: tosca.policies.Root
    properties:
      enable_node_metrics:
        type: boolean
        description: enable default collection of node resource metrics (with node_exporter)
        default: false
        required: true
      enable_container_metrics:
        type: boolean
        description: enable default collection of container resource metrics (with cAdvisor)
        default: false
        required: true
      custom_exporters:
        type: list
        description: custom list of exporters in format <pod-name>:<port>
        required: false
      stage:
        type: string
        description: the stage that will be affected by the policy (not yet implemented)
        default: started
        required: false
      priority:
        type: integer
        description: the priority with which the policy will be exectued (not yet implemented)
        default: 100
        required: false

  tosca.policies.Security.MiCADO.Network:
    derived_from: tosca.policies.Root
    description: Base policy for MiCADO network security policies
    properties:
      priority:
        type: integer
        required: true
        default: 100
      stage:
        type: string
        required: true
        default: deployment
      target_ports:
        type: list
        required: true

  tosca.policies.Security.MiCADO.Network.Passthrough:
    derived_from: tosca.policies.Security.MiCADO.Network
    description: Specifies no additional filtering, no application-level firewall

  tosca.policies.Security.MiCADO.Network.L7Proxy:
    derived_from: tosca.policies.Security.MiCADO.Network
    description: No protocol enforcement. Apply application-level firewall; can provide TLS control
    properties:
      encryption:
        type: boolean
        description: Specifies if encryption should be used
        required: true
      encryption_key:
        type: string
        description: The key file for TLS encryption as unencrypted .PEM
        required: false
      encryption_cert:
        type: string
        description: The cert file for TLS encryption as .PEM
        required: false
      encryption_offload:
        type: string
        description: Controls whether connection should be re-encrypted server side
        required: false
      encryption_cipher:
        type: string
        description: Specifies allowed ciphers client side during TLS handshake
        required: false

  tosca.policies.Security.MiCADO.Network.SmtpProxy:
    derived_from: tosca.policies.Security.MiCADO.Network.L7Proxy
    description: Enforce SMTP protocol, can provide TLS control
    properties:
      relay_check:
        type: boolean
        description: Toggle relay checking
        required: true
      permit_percent_hack:
        type: boolean
        description: Allow the % symbol in the local part of an email address
        required: false
      error_soft:
        type: boolean
        description: Return a soft error when recipient filter does not match
        required: false
      relay_domains:
        type: list
        description: Domain mails are accepted for use postfix style lists
        required: false
      permit_exclamation_mark:
        type: boolean
        description: Allow the ! symbol in the local part of an email address
        required: false
      relay_domains_matcher_whitelist:
        type: list
        description: Domains mails accepted based on list of regex (precedence)
        required: false
      relay_domains_matcher_blacklist:
        type: list
        description: Domain mails rejected based on list of regular expressions
        required: false
      sender_matcher_whitelist:
        type: list
        description: Sender addresses accepted based on list of regex (precedence)
        required: false
      sender_matcher_blacklist:
        type: list
        description: Sender addresses rejected based on list of regex
        required: false
      recipient_matcher_whitelist:
        type: list
        description: Recipient addresses accepted based on list of regex (precedence)
        required: false
      recipient_matcher_blacklist:
        type: list
        description: Recipient addresses rejected based on list of regex
        required: false
      autodetect_domain_from:
        type: string
        description: Let Zorp autodetect firewall domain name and write to received line
        constraints:
          - valid_values: ["mailname", "fqdn"]
        required: false
      append_domain:
        type: string
        description: Domain to append to email addresses which do not specify a domain
        required: false
      permit_omission_of_angle_brackets:
        type: boolean
        description: Permit MAIL From and RCPT To params without normally required brackets
        required: false
      interval_transfer_noop:
        type: integer
        description: Interval between two NOOP commands sent to server while waiting for stack proxy results
        required: false
      resolve_host:
        type: boolean
        description: Resolve client host from IP address and write to received line
        required: false
      permit_long_responses:
        type: boolean
        description: Permit overly long responses as some MTAs include variable parts in responses
        required: false
      max_auth_request_length:
        type: integer
        description: Maximum allowed length of a request during SASL style authentication
        required: false
      max_response_length:
        type: integer
        description: Maximum allowed line length of server response
        required: false
      unconnected_response_code:
        type: integer
        description: Error code sent to client if connecting to server fails
        required: false
      add_received_header:
        type: boolean
        description: Add a received header into the email messages transferred by proxy
        required: false
      domain_name:
        type: string
        description: Fix a domain name into added receive line. add_received_header must be true
        required: false
      tls_passthrough:
        type: boolean
        description: Change to passthrough mode
        required: false
      extensions:
        type: list
        description: Allowed ESMTP extensions, indexed by extension verb
        required: false
      require_crlf:
        type: boolean
        description: Specify whether proxy should enforce valid CRLF line terminations
        required: false
      timeout:
        type: integer
        description: Timeout in ms - if no packet arrives, connection is dropped
        required: false
      max_request_length:
        type: integer
        description: Maximum allowed line length of client requests
        required: false
      permit_unknown_command:
        type: boolean
        description: Enable unknown commands
        required: false

  tosca.policies.Security.MiCADO.Network.HttpProxy:
    derived_from: tosca.policies.Security.MiCADO.Network.L7Proxy
    description: Enforce HTTP protocol, can provide TLS control
    properties:
      max_keepalive_requests:
        type: integer
        description: Max number of requests allowed in a single session
        required: false
      permit_proxy_requests:
        type: boolean
        description: Allow proxy type requests in transparent mode
        required: false
      reset_on_close:
        type: boolean
        description: If connection is terminated without a proxy generated error, send an RST instead of a normal close
        required: false
      permit_unicode_url:
        type: boolean
        description: Allow unicode characters in URLs encoded as u'
        required: false
      permit_server_requests:
        type: boolean
        description: Allow server type requests in non transparent mode
        required: false
      max_hostname_length:
        type: integer
        description: Maximum allowed length of hostname field in URLs
        required: false
      parent_proxy:
        type: string
        description: Address or hostname of parent proxy to be connected
        required: false
      permit_ftp_over_http:
        type: boolean
        description: Allow processing FTP URLs in non transparent mode
        required: false
      parent_proxy_port:
        type: integer
        description: Port of parent proxy to be connected
        required: false
      permit_http09_responses:
        type: boolean
        description: Allow server responses to use limited HTTP 0 9 protocol
        required: false
      rewrite_host_header:
        type: boolean
        description: Rewrite host header in requests when URL redirection occurs
        required: false
      max_line_length:
        type: integer
        description: Maximum allowed length of lines in requests and responses
        required: false
      max_chunk_length:
        type: integer
        description: Maximum allowed length of a single chunk when using chunked transer encoding
        required: false
      strict_header_checking_action:
        type: string
        description: Specify Zorb action if non rfc or unknown header in communication
        constraints:
          - valid_values: ["accept", "drop", "abort"]
        required: false
      non_transparent_ports:
        type: list
        description: List of ports that non transparent requests may use
        required: false
      strict_header_checking:
        type: boolean
        description: Require RFC conformant HTTP headers
        required: false
      max_auth_time:
        type: integer
        description: Force new auth request from client browser after time in seconds
        required: false
      max_url_length:
        type: integer
        description: Maximum allowed length of URL in a request
        required: false
      timeout_request:
        type: integer
        description: Time to wait for a request to arrive from client
        required: false
      rerequest_attempts:
        type: integer
        description: Control number of attempts proxy takes to send request to server
        required: false
      error_status:
        type: integer
        description: On error, Zorp uses this as status code of HTTP response
        required: false
      keep_persistent:
        type: boolean
        description: Try to keep connection to client persistent, even if unsupported
        required: false
      error_files_directory:
        type: string
        description: Location of HTTP error messages
        required: false
      max_header_lines:
        type: integer
        description: Maximum number of eader lines allowed in requests and responses
        required: false
      use_canonicalized_urls:
        type: boolean
        description: Enable canonicalization - converts URLs to canonical form
        required: false
      max_body_length:
        type: integer
        description: Maximum allowed length of HTTP request or response body
        required: false
      require_host_header:
        type: boolean
        description: Require presence of host header
        required: false
      buffer_size:
        type: integer
        description: Size of I O buffer used to transfer entity bodies
        required: false
      permitted_responses:
        type: list
        description: Normative policy hash for HTTP responses indexed by HTTP method and response code
        entry_schema:
          description: dictionary (string/int)
          type: map
        required: false
      transparent_mode:
        type: boolean
        description: Enable transparent mode for the proxy
        required: false
      permit_null_response:
        type: boolean
        description: Permit RFC incompliant responses with headers not terminated by CRLF, and not containing entity body
        required: false
      language:
        type: string
        description: Specify language of HTTP error pages displayed to client
        required: false
        default: English
      error_silent:
        type: boolean
        description: Turns off verbose error reporting to HTTP client, making firewall fingerprinting more difficult
        required: false
      permitted_requests:
        type: list
        description: List of permitted HTTP methods indexed by verb
        required: false
      use_default_port_in_transparent_mode:
        type: boolean
        description: Enable use of default port in transparent mode
        required: false
      timeout_response:
        type: integer
        description: Time to wait for the HTTP status line to arrive from the server
        required: false
      permit_invalid_hex_escape:
        type: boolean
        description: Allow invalid hexadecimal escaping in URLs
        required: false
      auth_cache_time:
        type: integer
        description: Caching authentication information time in seconds
        required: false
      timeout:
        type: integer
        description: General I O timeout in ms
        required: false
      default_port:
        type: integer
        description: Used in non transparent mode when URL does not contain a port number
        required: false
        default: 80

  tosca.policies.Security.MiCADO.Network.HttpURIFilterProxy:
    derived_from: tosca.policies.Security.MiCADO.Network.HttpProxy
    description: Enforce HTTP protocol with regex URL filtering capabilities
    properties:
      matcher_whitelist:
        type: list
        description: List of regex determining permitted access to a URL (precedence)
        required: true
      matcher_blacklist:
        type: list
        description: List of regex determining prohibited access to a URL
        required: true

  tosca.policies.Security.MiCADO.Network.HttpWebdavProxy:
    derived_from: tosca.policies.Security.MiCADO.Network.HttpProxy
    description: Enforce HTTP protocol with request methods for WebDAV

  tosca.policies.Security.MiCADO.Secret.KubernetesSecretDistribution:
    derived_from: tosca.policies.Root
    description: distributes secrets to services
    properties:
      file_secrets:
        type: map
      text_secrets:
        type: map
